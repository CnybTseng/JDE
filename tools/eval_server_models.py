import os
import sys
import time
import argparse
import os.path as osp
sys.path.append(os.getcwd())
from mot.utils import mkdirs
from mot.utils import get_logger

def parse_args():
    parser = argparse.ArgumentParser(
        description='Evaluate models generated by training'
            ' on server through local MOT devkit')
    parser.add_argument('-ip', type=str, default='192.168.0.178',
        help='Server IP address')
    parser.add_argument('--port', '-p', type=int, default=45000,
        help='Server port')
    parser.add_argument('--username', '-un', type=str, default='root',
        help='Server username')
    parser.add_argument('--password', '-pw', type=str,
        help='Server login password')
    parser.add_argument('-dir', type=str,
        help='Models directory on server')
    parser.add_argument('--data-root', '-dr', type=str,
        default='/home/image/tseng/dataset/jde/MOT16/train/',
        help='dataset data root directory')
    parser.add_argument('--version', type=str, default='2.0',
        help='lightweight JDE version, 1.0 or 2.0')
    parser.add_argument('--save-path', '-sp', type=str,
        default='./tasks/evals/',
        help='path to the result')
    parser.add_argument('--num-model', '-nm', type=int,
        help='number of models to evaluation')
    return parser.parse_args()

if __name__ == '__main__':
    args = parse_args()
    args.save_path = os.path.abspath(args.save_path)
    mkdirs(args.save_path)
    done = []
    logger = get_logger(path=osp.join(args.save_path, 'log.txt'))
    while True:
        # Exit dead loop.
        if len(done) >= args.num_model:
            logger.info('All works have been done.')
            break
    
        # Read files list from server.
        cmd = "sshpass -p {} ssh {}@{} -p {} \"cd \"{}\"; basename -a *.pth; exit\"".format(
            args.password, args.username, args.ip, args.port, args.dir)
        
        logger.info('File read command: {}'.format(cmd))
        with os.popen(cmd) as fd:
            returns = fd.read()

        files = returns.split(sep='\n')
        files = [l.strip() for l in files]
        files = list(filter(lambda x: len(x) > 0, files))
        files = [l for l in files if l != 'latest.pth']
        files = [f for f in files if not '*' in f]
        logger.info('File read result:\n{}'.format(files))

        for file in files:
            if file in done:
                continue
            
            # Download file from server.
            cmd = 'sshpass -p {} scp -P {} {}@{}:{} {}'.format(
                args.password, args.port, args.username, args.ip,
                osp.join(args.dir, file), args.save_path)
            logger.info('Download command: {}'.format(cmd))
            os.system(cmd)

            # Evaluate on MOT16.
            path = os.path.join(args.save_path, file)
            _, name_with_ext = os.path.split(path)
            name, _ = os.path.splitext(name_with_ext)
            cmd = 'cd 3rdparty/Towards-Realtime-MOT/ && python track.py --cfg cfg/yolov3_576x320.cfg --weights {} --test-mot16 --data-root {} --version {} --mot-config ../../configs/shufflenetv2_jde_all.yaml'.format(path, args.data_root, args.version)
            logger.info('Evaluate command: {}'.format(cmd))
            os.system(cmd)
            
            # Save result.
            exp_name = path.split('/')[-2]
            results = os.path.join(args.data_root, '..', 'results', exp_name, '*')
            rpath = os.path.join(args.save_path, name)
            cmd = 'mkdir -p {} && mv {} {}'.format(rpath, results, rpath)
            logger.info('copy command: {}'.format(cmd))
            os.system(cmd)
            done.append(file)
        logger.info('waiting for data ...')
        time.sleep(10)