#
# Copyright (c) Huawei Technologies Co., Ltd. 2017-2018. All rights reserved.
# Description: generated by MindStudio
# Author: Huawei
# Create: 2017-06-06
#

# before run cmake, please set DDK_PATH, PYTHON27_INC_DIR, PYTHON27_LIB_DIR path to environment
# eg: ubuntu16.04:
# export PYTHON27_INC_DIR = /usr/include/python2.7
# export PYTHON27_LIB_DIR = /usr/lib/python2.7/config-x86_64-linux-gnu
cmake_minimum_required(VERSION 3.5.1)

set(OPERATOR "jdecoder")
project("${OPERATOR}_plugin")
set(TOPDIR "$ENV{DDK_PATH}")
set(PYTHON27_INC_DIR "$ENV{PYTHON27_INC_DIR}")
set(PYTHON27_LIB_DIR "$ENV{PYTHON27_LIB_DIR}")

# operator param
set(CUSTOM_OBJECT_NAME "${OPERATOR}_parser")
set(CAFFE_OBJECT_NAME "_caffe_parser")

# target build folders
set(CAFFE_INC_DIR "${PROJECT_SOURCE_DIR}/../../..")
set(BUILD_PROTO_DIR "${CAFFE_INC_DIR}/proto/caffe")

# caffe related param
set(PROTOC_PATH "${TOPDIR}/uihost/bin/protoc")
if(EXISTS "${BUILD_PROTO_DIR}/caffe.proto")
    set(CAFFE_BUILD_PROTO_DIR "${BUILD_PROTO_DIR}")
    set(CAFFE_BUILD_PROTO_PATH "${BUILD_PROTO_DIR}/caffe.proto")
else()
    set(CAFFE_BUILD_PROTO_DIR "${TOPDIR}/include/inc/custom/proto/caffe")
    set(CAFFE_BUILD_PROTO_PATH "${CAFFE_BUILD_PROTO_DIR}/caffe.proto")
endif()

message(STATUS "Caffe proto file path: ${CAFFE_BUILD_PROTO_PATH}")

# CC Flags
set(CMAKE_CXX_FLAGS  "-std=c++11 -fPIC")

# include
set(INCLUDE_DIR "${TOPDIR}/include")
set(SRC_DIR ".")
include_directories(
    "${SRC_DIR}"
    "${CAFFE_INC_DIR}"
    "${INCLUDE_DIR}/inc"
    "${INCLUDE_DIR}/inc/custom"
    "${INCLUDE_DIR}/inc/graph"
    "${INCLUDE_DIR}/third_party/protobuf/include"
    "${INCLUDE_DIR}/libc_sec/include"
    "${PYTHON27_INC_DIR}"
)

# link library
link_directories(
    "${PYTHON27_LIB_DIR}"
    "${TOPDIR}/uihost/lib/"
)

# generate Caffe cpp loading code from caffe.proto
# protoc --cpp_out={out_path} --proto_path={proto directory} {caffe proto full path}
add_custom_command(OUTPUT ${BUILD_PROTO_DIR}/caffe.pb.h ${BUILD_PROTO_DIR}/caffe.pb.cc
    COMMAND ${CMAKE_COMMAND} -E make_directory ${BUILD_PROTO_DIR}
    COMMAND ${PROTOC_PATH} --cpp_out=${BUILD_PROTO_DIR} --proto_path=${CAFFE_BUILD_PROTO_DIR} ${CAFFE_BUILD_PROTO_PATH}
    MAIN_DEPENDENCY
    COMMENT "generate caffe cpp code from caffe.proto"
)

if(NOT TARGET ${CAFFE_OBJECT_NAME})
    # build lib_caffe_parse.so
    add_library(${CAFFE_OBJECT_NAME} SHARED
        ${BUILD_PROTO_DIR}/caffe.pb.cc
)
endif()

# build libjdecoder_parser.so
add_library(${CUSTOM_OBJECT_NAME} SHARED
    ./JDEcoder_parser.cpp
)

add_dependencies(${CUSTOM_OBJECT_NAME} ${CAFFE_OBJECT_NAME})

target_link_libraries(${CUSTOM_OBJECT_NAME} ${CAFFE_OBJECT_NAME} python2.7 omg te_fusion) 

SET(LIBRARY_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/../../build/outputs/parser")

